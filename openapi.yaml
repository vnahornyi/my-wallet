openapi: 3.1.0
info:
  title: My Wallet API
  version: 1.0.0
  description: |
    API for managing personal finance data in the My Wallet application.
    All endpoints require a Supabase access token provided as a Bearer token.
servers:
  - url: http://localhost:3000/api
    description: Placeholder server URL
security:
  - BearerAuth: []
paths:
  /auth/v1/token:
    servers:
      - url: "{supabaseUrl}"
        description: Supabase base URL (use the same value as `NEXT_PUBLIC_SUPABASE_URL`).
        variables:
          supabaseUrl:
            default: http://127.0.0.1:54321
            description: Supabase project URL.
    post:
      tags:
        - Auth
      summary: Sign in with email and password
      description: |
        Obtain an access token from Supabase Auth using the email/password grant.
        Set the server URL to the value of `NEXT_PUBLIC_SUPABASE_URL`. Pass `grant_type=password`
        as a query parameter to receive a short-lived `access_token` for Bearer auth.
      parameters:
        - in: query
          name: grant_type
          required: true
          schema:
            type: string
            enum:
              - password
            default: password
          description: Authentication grant type. Must be `password` for email/password sign-in.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthPasswordSignInRequest'
      responses:
        '200':
          description: Authentication successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthSessionResponse'
        '400':
          description: Invalid credentials or request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
        '401':
          description: Authentication failed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthErrorResponse'
      security:
        - ApiKeyAuth: []
  /v1/categories:
    get:
      security:
        - BearerAuth: []
      tags:
        - Categories
      summary: List categories
      description: Retrieve all categories available to the authenticated user, including global categories.
      responses:
        '200':
          description: Categories retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryList'
        '401':
          description: Missing or invalid bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      security:
        - BearerAuth: []
      tags:
        - Categories
      summary: Create category
      description: Create a new personal category for the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryPayload'
      responses:
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryMutation'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Missing or invalid bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/budgets:
    get:
      security:
        - BearerAuth: []
      tags:
        - Budgets
      summary: List budgets
      description: Retrieve all budgets owned by the authenticated user.
      responses:
        '200':
          description: Budgets retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetList'
        '401':
          description: Missing or invalid bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      security:
        - BearerAuth: []
      tags:
        - Budgets
      summary: Create budget
      description: Create a new budget for the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BudgetPayload'
      responses:
        '201':
          description: Budget created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BudgetMutation'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Missing or invalid bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Related resource not found (for example, category).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/expenses:
    get:
      security:
        - BearerAuth: []
      tags:
        - Expenses
      summary: List expenses
      description: Retrieve paginated expenses for the authenticated user.
      parameters:
        - in: query
          name: from
          schema:
            type: string
            format: date-time
          description: ISO 8601 start date filter (inclusive).
        - in: query
          name: to
          schema:
            type: string
            format: date-time
          description: ISO 8601 end date filter (inclusive).
        - in: query
          name: categoryId
          schema:
            type: string
            format: uuid
          description: Filter by category identifier.
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Maximum number of items to return.
        - in: query
          name: offset
          schema:
            type: integer
            minimum: 0
            default: 0
          description: Number of items to skip before collecting results.
      responses:
        '200':
          description: Expenses retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseList'
        '400':
          description: Invalid query parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Missing or invalid bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      security:
        - BearerAuth: []
      tags:
        - Expenses
      summary: Create expense
      description: Create a new expense for the authenticated user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExpensePayload'
      responses:
        '201':
          description: Expense created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpenseMutation'
        '400':
          description: Invalid request payload.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Missing or invalid bearer token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Related resource not found (for example, category).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Unexpected server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: apikey
      description: Supabase anon key required when calling auth endpoints.
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Supabase access token provided in the Authorization header.
  schemas:
    CategoryPayload:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        color:
          type: string
          pattern: '^#([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$'
        icon:
          type: string
          maxLength: 50
    Category:
      type: object
      required:
        - id
        - name
        - color
        - icon
        - isGlobal
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        color:
          type: string
          nullable: true
        icon:
          type: string
          nullable: true
        isGlobal:
          type: boolean
    CategoryList:
      type: object
      required:
        - categories
      properties:
        categories:
          type: array
          items:
            $ref: '#/components/schemas/Category'
    CategoryMutation:
      type: object
      required:
        - category
      properties:
        category:
          $ref: '#/components/schemas/Category'
    BudgetPayload:
      type: object
      required:
        - amount
        - period
        - startDate
      properties:
        categoryId:
          type: string
          format: uuid
          nullable: true
        amount:
          type: number
          exclusiveMinimum: 0
        period:
          $ref: '#/components/schemas/BudgetPeriod'
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
          description: Required when period is `custom`.
    Budget:
      type: object
      required:
        - id
        - amount
        - period
        - startDate
        - endDate
        - categoryId
        - categoryName
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
          nullable: true
        categoryName:
          type: string
          nullable: true
        amount:
          type: number
        period:
          $ref: '#/components/schemas/BudgetPeriod'
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        createdAt:
          type: string
          format: date-time
    BudgetPeriod:
      type: string
      enum:
        - weekly
        - monthly
        - custom
    BudgetList:
      type: object
      required:
        - budgets
      properties:
        budgets:
          type: array
          items:
            $ref: '#/components/schemas/Budget'
    BudgetMutation:
      type: object
      required:
        - budget
      properties:
        budget:
          $ref: '#/components/schemas/Budget'
    ExpensePayload:
      type: object
      required:
        - amount
        - date
      properties:
        amount:
          type: number
          exclusiveMinimum: 0
        categoryId:
          type: string
          format: uuid
          nullable: true
        note:
          type: string
          maxLength: 500
          nullable: true
        date:
          type: string
          format: date-time
    Expense:
      type: object
      required:
        - id
        - amount
        - categoryId
        - note
        - date
        - createdAt
      properties:
        id:
          type: string
          format: uuid
        amount:
          type: number
        categoryId:
          type: string
          format: uuid
          nullable: true
        note:
          type: string
          nullable: true
        date:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
    ExpenseList:
      type: object
      required:
        - data
        - pagination
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Expense'
        pagination:
          $ref: '#/components/schemas/Pagination'
    ExpenseMutation:
      type: object
      required:
        - expense
      properties:
        expense:
          $ref: '#/components/schemas/Expense'
    Pagination:
      type: object
      required:
        - limit
        - offset
        - total
      properties:
        limit:
          type: integer
          minimum: 1
        offset:
          type: integer
          minimum: 0
        total:
          type: integer
          minimum: 0
    ErrorResponse:
      type: object
      required:
        - status
        - code
        - message
      properties:
        status:
          type: integer
          minimum: 400
          maximum: 599
        code:
          type: string
          pattern: '^\\d{3,4}$'
        message:
          type: string
        details:
          description: Additional error metadata.
          nullable: true
          oneOf:
            - type: string
            - type: object
            - type: array
            - type: number
            - type: boolean
            - type: integer
    AuthPasswordSignInRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
          description: Password set for the Supabase user.
    AuthSessionResponse:
      type: object
      required:
        - access_token
        - token_type
        - expires_in
        - refresh_token
        - user
      properties:
        access_token:
          type: string
          description: JWT access token.
        token_type:
          type: string
          enum:
            - bearer
        expires_in:
          type: integer
          description: Token lifetime in seconds.
        refresh_token:
          type: string
        user:
          type: object
          description: User metadata returned by Supabase Auth.
          additionalProperties: true
    AuthErrorResponse:
      type: object
      required:
        - error
        - error_description
      properties:
        error:
          type: string
        error_description:
          type: string
